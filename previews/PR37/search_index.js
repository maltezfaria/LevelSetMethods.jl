var documenterSearchIndex = {"docs":
[{"location":"example-shape-optim/#example-shape-optim","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"","category":"section"},{"location":"example-shape-optim/#Isoperimetric-inequality-as-a-shape-optimization-problem","page":"Shape optimization: a primer","title":"Isoperimetric inequality as a shape optimization problem","text":"","category":"section"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"We consider in this example the isoperimetric inequality which states that among all closed surfaces enclosing a fixed area with volume V_0  0, the sphere is the one with minimal perimeter. We show here how to demonstrate this result through numerical optimization. To do this, we first define the problem mathematically (1):","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"    beginarrayrl\n        displaystylemin_Omega subset mathbbR^N  P(Omega)\n        \n        textuc  V(Omega) = V_0\n    endarray","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"where P(Omega) V(Omega) are the perimeter and volume of Omega defined by","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"    V(Omega) = int_Omega textdmathbfx\n    quadtextandquad\n    P(Omega) = int_partial Omega textdmathbfs\n    ","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"The optimization problem (1) can be solved using the augmented Lagrangian approach by minimizing iteratively the following functional (2):","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"    f(Omega) = P(Omega) + lambda (V(Omega) - V_0) + fracmu2 (V(Omega) - V_0)^2","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"where mu is a parameter updated during the course of the optimization. To minimize (2), we will use a gradient-based algorithm. For this, we need to define what a small variation of Omega is. As such, we define for any shape Omega subset mathbbR^N its deformed configuration Omega_boldsymboltheta by a small vector field boldsymboltheta in W^1infty(mathbbR^N mathbbR^N) as:","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"    Omega_boldsymboltheta\n    = (textId + boldsymboltheta)(Omega)\n    = mathbfx + boldsymboltheta(mathbfx) mathbfx in Omega","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"The following first-order Taylor expansion can then be obtained:","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"    f(Omega_boldsymboltheta)\n    =\n    f(Omega)\n    +\n    int_partial Omega\n    left(\n        kappa + (lambda + mu (V(Omega) - V_0))\n    right) boldsymboltheta cdot mathbfn\n    textdmathbfs\n    + o(boldsymboltheta)\n    ","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"In other words, using boldsymboltheta = - (kappa + (lambda + mu (V(Omega) - V_0))) mathbfn and a small enough coefficient tau  0, f(Omega_tauboldsymboltheta) is necessary smaller than f(Omega).","category":"page"},{"location":"example-shape-optim/#Numerical-solution-using-the-level-set-method","page":"Shape optimization: a primer","title":"Numerical solution using the level-set method","text":"","category":"section"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"If Omega is given by the level-set function phi_0  R^N to R then one associated with Omega_tauboldsymboltheta is given by phi(cdot tau) solution of","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"    partial_t phi - kappa nabla phi - (lambda + mu (V(Omega) - V_0)) nabla phi = 0","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"with phi(cdot t = 0) = phi_0. In practice, it is easier to deal with deformations of fixed amplitude s, i.e. taumathbftheta_L^infty = delta. The value of tau is therefore set at each iteration as tau = deltamathbftheta_L^infty.","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"This optimization method is implemented in the following Julia code:","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"using LevelSetMethods\nusing LinearAlgebra\n\na = (-1.0, -1.0)\nb = (+1.0, +1.0)\nn = (50, 50)\ngrid = CartesianGrid(a, b, n)\n\nϕ = LevelSetMethods.star(grid)\n\nterm1 = NormalMotionTerm(MeshField(X -> 0.0, grid))\nterm2 = CurvatureTerm(MeshField(X -> -1.0, grid))\nterms = (term1, term2)\n\nbc = NeumannGradientBC()\nintegrator = ForwardEuler(0.5)\neq = LevelSetEquation(; terms, integrator, levelset = ϕ, t = 0, bc)\n\nusing GLMakie\n\nnit = 200\nanim = with_theme(LevelSetMethods.makie_theme()) do\n    λ, μ = 0.0, 0.1\n    c = 1.1\n    V0 = 0.5\n    R0 = sqrt(V0/π)\n    P0 = 2π*R0\n    δ = 0.25\n\n    eq.t = 0\n    obs = Observable(eq)\n    fig = Figure()\n    ax = Axis(fig[1, 1])\n    plot!(ax, obs)\n    arc!([0; 0], R0, 0, 2π)\n\n    record(fig, joinpath(@__DIR__,\"optimization.gif\"), 1:nit) do it\n        P = LevelSetMethods.Perimeter(ϕ)\n        V = LevelSetMethods.Volume(ϕ)\n\n        term1 = NormalMotionTerm(MeshField(X -> -(λ + μ * (V - V0)), grid))\n        eq.terms = (term1, term2)\n\n        τ = δ * LevelSetMethods.compute_cfl(eq.terms, eq.state, eq.t)\n        integrate!(eq, eq.t + τ)\n\n        λ += μ * (V - V0)\n        μ *= c\n        return obs[] = eq\n    end\nend","category":"page"},{"location":"example-shape-optim/","page":"Shape optimization: a primer","title":"Shape optimization: a primer","text":"(Image: Optimization)","category":"page"},{"location":"extension-makie/#extension-makie","page":"Makie extension","title":"Makie extension","text":"","category":"section"},{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/maltezfaria/LevelSetMethods.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/maltezfaria/LevelSetMethods.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a RP to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/maltezfaria/LevelSetMethods.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"time-integrators/#time-integrators","page":"Time integration","title":"Time integration","text":"","category":"section"},{"location":"time-integrators/","page":"Time integration","title":"Time integration","text":"The following options are available for time integration:","category":"page"},{"location":"time-integrators/","page":"Time integration","title":"Time integration","text":"using LevelSetMethods\nusing InteractiveUtils # hide\nsubtypes(LevelSetMethods.TimeIntegrator)","category":"page"},{"location":"time-integrators/","page":"Time integration","title":"Time integration","text":"These are all explicit schemes, and therefore a sufficiently small time step, dependant on the LevelSetTerm being used, is required to ensure stability. We recommend using the third order RK3 scheme for most applications.","category":"page"},{"location":"boundary-conditions/#boundary-conditions","page":"Boundary conditions","title":"Boundary conditions","text":"","category":"section"},{"location":"terms/#terms","page":"Level-set terms","title":"Level-set terms","text":"","category":"section"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"A level-set equation is given by","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"  phi_t + sum_n textttterm_n = 0","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"where each textttterm_n is a LevelSetTerm object. Here we investigate the meaning of each term, and how they can be used to model different phenomena.","category":"page"},{"location":"terms/#advection","page":"Level-set terms","title":"Advection","text":"","category":"section"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"The simplest term is the advection term, which is given by","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"  mathbfu cdot nabla phi","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"where mathbfu is a velocity field. This term models the transport of the level-set by an external velocity field. You can construct an advection term using the AdvectionTerm structure:","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"using LevelSetMethods, StaticArrays\ngrid = CartesianGrid((-1,-1), (1,1), (100, 100))\n𝐮 = MeshField(x -> SVector(1,0), grid)\nAdvectionTerm(𝐮)","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"In the example above we passed a MeshField object to the AdvectionTerm constructor, meaning that the velocity field is simply a vector of values at each grid point. This is useful if your velocity field is time-independent, or if you only know it at grid points. Lets construct a level-set equation with an advection term:","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"ϕ₀ = LevelSet(x -> sqrt(x[1]^2 + x[2]^2) - 0.5, grid)\neq = LevelSetEquation(; terms = (AdvectionTerm(𝐮),), levelset = ϕ₀, bc = PeriodicBC())","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"To see how the advection term affects the level-set, we can solve the equation for a few time steps:","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"using GLMakie\nLevelSetMethods.set_makie_theme!()\nfig = Figure(; size = (1200, 300))\n# create a 2 x 2 figure\nfor (n,t) in enumerate([0.0, 0.5, 0.75, 1.0])\n    I = CartesianIndices((2,2))[n]\n    integrate!(eq, t)\n    # ax = Axis(fig[I[1],I[2]])\n    ax = Axis(fig[1,n])\n    plot!(ax, eq)\nend\nfig","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"In the example above we see that the level-set is advected to the right. If we wanted to have instead a time-dependent velocity field, we could pass a function to the AdvectionTerm, and the velocity field would be computed at each time step. For example:","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"ϕ₀ = LevelSet(x -> sqrt(x[1]^2 + x[2]^2) - 0.5, grid)\neq = LevelSetEquation(; terms = (AdvectionTerm((x,t) -> SVector(x[1]^2, 0)),), levelset = ϕ₀, bc = PeriodicBC())\nfig = Figure(; size = (1200, 300))\n# create a 2 x 2 figure\nfor (n,t) in enumerate([0.0, 0.5, 0.75, 1.0])\n    I = CartesianIndices((2,2))[n]\n    integrate!(eq, t)\n    # ax = Axis(fig[I[1],I[2]])\n    ax = Axis(fig[1,n])\n    plot!(ax, eq)\nend\nfig","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"Besides the velocity field, the AdvectionTerm constructor also accepts a scheme as a second argument to specify the discretization scheme. The available options are:","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"Upwind(): first-order upwind scheme\nWENO5(): fifth-order WENO scheme (default)","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"The WENO scheme is more expensive but much more accurate and is usually preferable to the upwind scheme, which introduces significant numerical diffusion. To see their differences, let us compare both schemes for a purely rotational velocity field:","category":"page"},{"location":"terms/","page":"Level-set terms","title":"Level-set terms","text":"ϕ₀ = LevelSetMethods.dumbbell(grid) # pre-defined level-set\n𝐮  = MeshField(grid) do (x,y)\n    SVector(-y, x)\nend\neq_upwind = LevelSetEquation(; terms = AdvectionTerm(𝐮, Upwind()), levelset = deepcopy(ϕ₀), bc = PeriodicBC())\neq_weno   = LevelSetEquation(; terms = AdvectionTerm(𝐮), levelset  = deepcopy(ϕ₀), bc = PeriodicBC())\nfig = Figure(size = (1000, 400))\nax = Axis(fig[1,1], title = \"Initial\")\nplot!(ax, eq_upwind)\n# do a full revolution\ntf = π\nax = Axis(fig[1,2], title = \"Upwind\")\nintegrate!(eq_upwind, tf)\nplot!(ax, eq_upwind)\nax = Axis(fig[1,3], title = \"WENO5\")\nintegrate!(eq_weno, tf)\nplot!(ax, eq_weno)\nfig","category":"page"},{"location":"extension-mmg/#extension-mmg","page":"MMG extension","title":"MMG extension","text":"","category":"section"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"This extension provides functions to generate meshes of levelset functions using MMG. It define two methods: export_volume_mesh and export_surface_mesh. For both of them, it is possible to control the size of the generated mesh using the following optional parameters:","category":"page"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"hgrad control the growth ratio between two adjacent edges.\nhmin and hmax control the edge sizes to be (respectively) greater than the hmin parameter and lower than the hmax one.\nhausd control the maximal distance between the piecewise linear representation of the boundary and the reconstructed ideal boundary.","category":"page"},{"location":"extension-mmg/#Generation-of-2D-and-3D-mesh-from-a-level-set","page":"MMG extension","title":"Generation of 2D and 3D mesh from a level-set","text":"","category":"section"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"For 2 and 3 dimensional Cartesian levelset, one can use the export_volume_mesh function to generate meshes. This method relies on the mmg2d_O3 and mmg3d_O3 utilities. Example in 2D:","category":"page"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"using LevelSetMethods, MMG_jll\ngrid = CartesianGrid((-1, -1), (+1, +1), (50, 50))\nϕ = LevelSetMethods.star(grid)\nLevelSetMethods.export_volume_mesh(ϕ, \"Volume2D.mesh\")","category":"page"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"(Image: Volume2D)","category":"page"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"And similarly in 3D:","category":"page"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"using LevelSetMethods, MMG_jll\ngrid = CartesianGrid((-1, -1, -1), (+1, +1, +1), (20, 20, 20))\nϕ = LevelSetMethods.sphere(grid)\nLevelSetMethods.export_volume_mesh(ϕ, \"Volume3D.mesh\")","category":"page"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"(Image: Volume3D)","category":"page"},{"location":"extension-mmg/#Generation-of-3D-surface-mesh-with-MarchingCubes.jl","page":"MMG extension","title":"Generation of 3D surface mesh with MarchingCubes.jl","text":"","category":"section"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"Using the mmgs_O3 utility, the MarchingCubes.jl library and the export_surface_mesh function it is possible to obtain a mesh of the levelset contour.","category":"page"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"using LevelSetMethods, MMG_jll, MarchingCubes\ngrid = CartesianGrid((-2, -1, -1), (+2, +1, +1), (40, 20, 20))\nϕ = LevelSet(x -> 1.0, grid)\nadd_circle!(ϕ, [-1.0, 0.0, 0.0], 0.75)\nadd_circle!(ϕ, [+1.0, 0.0, 0.0], 0.75)\nadd_rectangle!(ϕ, [0.0, 0.0, 0.0], [2.0, 0.5, 0.5])\nLevelSetMethods.export_surface_mesh(ϕ, \"Surface3D.mesh\"; hausd = 1.2, hmax = 1.0)","category":"page"},{"location":"extension-mmg/","page":"MMG extension","title":"MMG extension","text":"(Image: Surface3D)","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Modules = [LevelSetMethods,\n          Base.get_extension(LevelSetMethods, :MakieExt),\n          Base.get_extension(LevelSetMethods, :MMGSurfaceExt),\n          Base.get_extension(LevelSetMethods, :MMGVolumeExt)\n          ]","category":"page"},{"location":"95-reference/#LevelSetMethods.AbstractMesh","page":"Reference","title":"LevelSetMethods.AbstractMesh","text":"abstract type AbstractMesh{N,T}\n\nAn abstract mesh structure in dimension N with primite data of type T.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.AdvectionTerm","page":"Reference","title":"LevelSetMethods.AdvectionTerm","text":"AdvectionTerm(𝐮, scheme = WENO5())\n\nAdvection term representing  𝐮 ⋅ ∇ϕ. Available schemes are Upwind and WENO5.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.BoundaryCondition","page":"Reference","title":"LevelSetMethods.BoundaryCondition","text":"abstract type BoundaryCondition\n\nTypes used to specify boundary conditions.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.CartesianGrid-Tuple{Any, Any, Any}","page":"Reference","title":"LevelSetMethods.CartesianGrid","text":"CartesianGrid(lc, hc, n)\n\nCreate a uniform cartesian grid with lower corner lc, upper corner hc and and n nodes in each direction.\n\nExamples\n\nusing LevelSetMethods\na = (0, 0)\nb = (1, 1)\nn = (10, 4)\ngrid = CartesianGrid(a, b, n)\n\n# output\n\nCartesianGrid{2, Int64}([0, 0], [1, 1], (10, 4))\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.CartesianMeshField","page":"Reference","title":"LevelSetMethods.CartesianMeshField","text":"const CartesianMeshField{V,M<:CartesianGrid} = MeshField{V,M}\n\nMeshField over a CartesianGrid.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.CurvatureTerm","page":"Reference","title":"LevelSetMethods.CurvatureTerm","text":"struct CurvatureTerm{V,M} <: LevelSetTerm\n\nLevel-set curvature term representing bκ|∇ϕ|, where κ = ∇ ⋅ (∇ϕ/|∇ϕ|) is the curvature.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.DirichletBC","page":"Reference","title":"LevelSetMethods.DirichletBC","text":"struct DirichletBC{T} <: BoundaryCondition\n\nA Dirichlet boundary condition taking values of f(x) at the boundary.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.LevelSet","page":"Reference","title":"LevelSetMethods.LevelSet","text":"LevelSet\n\nAlias for MeshField with vals as an AbstractArray of Reals.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.LevelSetEquation-Tuple{}","page":"Reference","title":"LevelSetMethods.LevelSetEquation","text":"LevelSetEquation(; terms, levelset, boundary_conditions, t = 0, integrator = RK3())\n\nCreate a of a level-set equation of the form ϕₜ + sum(terms) = 0, where each t ∈ terms is a LevelSetTerm and levelset is the initial LevelSet.\n\nCalling integrate!(ls, tf) will evolve the level-set equation up to time tf, modifying the current_state(eq) and current_time(eq) of the object eq in the process (and therefore the original levelset).\n\nBoundary conditions can be specified in two ways. If a single BoundaryCondition is provided, it will be applied uniformly to all boundaries of the domain. To apply different boundary conditions to each boundary, pass a tuple of the form (bc_x, bc_y, ...) with as many elements as dimensions in the domain. If bc_x is a BoundaryCondition, it will be applied to both boundaries in the x direction. If bc_x is a tuple of two BoundaryConditions, the first will be applied to the left boundary and the second to the right boundary. The same logic applies to the other dimensions.\n\nThe optional parameter t specifies the initial time of the simulation, and integrator is the TimeIntegrator used to evolve the level-set equation.\n\nusing LevelSetMethods, StaticArrays\ngrid = CartesianGrid((-1, -1), (1, 1), (50, 50))    # define the grid\nϕ = LevelSet(x -> x[1]^2 + x[2]^2 - 0.5^2, grid)    # initial shape\n𝐮 = MeshField(x -> SVector(1, 0), grid)             # advection velocity\nterms = (AdvectionTerm(𝐮),)            # advection and curvature terms\nbc = PeriodicBC()                                   # periodic boundary conditions\neq = LevelSetEquation(; terms, levelset = ϕ, bc)    # level-set equation\n\n# output\n\nLevel-set equation given by\n\n \t ϕₜ + 𝐮 ⋅ ∇ ϕ = 0\n\nCurrent time 0.0\n\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.LevelSetTerm","page":"Reference","title":"LevelSetMethods.LevelSetTerm","text":"abstract type LevelSetTerm\n\nA typical term in a level-set evolution equation.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.MeshField","page":"Reference","title":"LevelSetMethods.MeshField","text":"struct MeshField{V,M,B}\n\nA field described by its discrete values on a mesh.\n\nBase.getindex of an MeshField is overloaded to handle indices that lie outside the CartesianIndices of its MeshField by using bcs.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.MeshField-Tuple{Function, Any}","page":"Reference","title":"LevelSetMethods.MeshField","text":"MeshField(f::Function, m)\n\nCreate a MeshField by evaluating a function f on a mesh m.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.NeumannBC","page":"Reference","title":"LevelSetMethods.NeumannBC","text":"struct NeumannBC <: BoundaryCondition\n\nHomogenous Neumann boundary condition, i.e. ∂x ϕ = 0.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.NeumannGradientBC","page":"Reference","title":"LevelSetMethods.NeumannGradientBC","text":"struct NeumannGradientBC <: BoundaryCondition\n\nHomogenous Neumann gradient boundary condition, i.e. ∂xx ϕ = 0.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.NormalMotionTerm","page":"Reference","title":"LevelSetMethods.NormalMotionTerm","text":"struct NormalMotionTerm{V,M} <: LevelSetTerm\n\nLevel-set advection term representing  v |∇ϕ|. This LevelSetTerm should be used for internally generated velocity fields; for externally generated velocities you may use AdvectionTerm instead.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.PeriodicBC","page":"Reference","title":"LevelSetMethods.PeriodicBC","text":"struct PeriodicBC <: BoundaryCondition\n\nSingleton type representing periodic boundary conditions.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.RK2","page":"Reference","title":"LevelSetMethods.RK2","text":"struct RK2\n\nSecond order total variation dimishing Runge-Kutta scheme, also known as Heun's predictor-corrector method.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.RK3","page":"Reference","title":"LevelSetMethods.RK3","text":"struct RK3\n\nThird order total variation dimishing Runge-Kutta scheme.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.ReinitializationTerm","page":"Reference","title":"LevelSetMethods.ReinitializationTerm","text":"struct ReinitializationTerm <: LevelSetTerm\n\nLevel-set term representing  sign(ϕ) (|∇ϕ| - 1). This LevelSetTerm should be used for reinitializing the level set into a signed distance function: for a sufficiently large number of time steps this term allows one to solve the Eikonal equation |∇ϕ| = 1.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.TimeIntegrator","page":"Reference","title":"LevelSetMethods.TimeIntegrator","text":"abstract type TimeIntegrator end\n\nAbstract type for time integrators. See subtypes(TimeIntegrator) for a list of available time integrators.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#LevelSetMethods.D2-Tuple{Any, Any, Any}","page":"Reference","title":"LevelSetMethods.D2","text":"D2(ϕ::CartesianMeshField,I,dims)\n\nFinite difference scheme for second order derivative at grid point I along the dimensions dims.\n\nIf dims[1] == dims[2], it is more efficient to call D2⁰(ϕ,I,dims[1]).\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.D2⁰-Tuple{MeshField{V, M} where {V, M<:CartesianGrid}, Any, Any}","page":"Reference","title":"LevelSetMethods.D2⁰","text":"D2⁰(ϕ::CartesianMeshField,I,dim)\n\nCentered finite difference scheme for second order derivative at grid point I along dimension dim. E.g. if dim=1, this approximates ∂ₓₓ.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.D2⁺⁺-Tuple{MeshField{V, M} where {V, M<:CartesianGrid}, Any, Any}","page":"Reference","title":"LevelSetMethods.D2⁺⁺","text":"D2⁺⁺(ϕ::CartesianMeshField,I,dim)\n\nUpward finite difference scheme for second order derivative at grid point I along dimension dim. E.g. if dim=1, this approximates ∂ₓₓ.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.D2⁻⁻-Tuple{MeshField{V, M} where {V, M<:CartesianGrid}, Any, Any}","page":"Reference","title":"LevelSetMethods.D2⁻⁻","text":"D2⁻⁺(ϕ::CartesianMeshField,I,dim)\n\nBackward finite difference scheme for second order derivative at grid point I along dimension dim. E.g. if dim=1, this approximates ∂ₓₓ.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.D⁰-Tuple{MeshField{V, M} where {V, M<:CartesianGrid}, Any, Any}","page":"Reference","title":"LevelSetMethods.D⁰","text":"D⁰(ϕ::CartesianMeshField,I,dim)\n\nCentered finite difference scheme for first order derivative at grid point I along dimension dim.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.D⁺-Tuple{MeshField{V, M} where {V, M<:CartesianGrid}, Any, Any}","page":"Reference","title":"LevelSetMethods.D⁺","text":"D⁺(ϕ::CartesianMeshField,I,dim)\n\nForward finite difference scheme for first order derivative at grid point I along dimension dim.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.D⁻-Tuple{MeshField{V, M} where {V, M<:CartesianGrid}, Any, Any}","page":"Reference","title":"LevelSetMethods.D⁻","text":"D⁻(ϕ::CartesianMeshField,I,dim)\n\nBackward finite difference scheme for first order derivative at grid point I along dimension dim.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.Perimeter-Tuple{LevelSet}","page":"Reference","title":"LevelSetMethods.Perimeter","text":"Perimeter(ϕ::LevelSet)\n\nCompute the perimeter area of the level-set function. Note: this function does not compute the perimeter on the borders of the domain.\n\nusing LevelSetMethods\nR = 0.5\nS0 = 2π * R\nS = []\nNs = 8:8:256\nnb = length(Ns)\nfor N in Ns\n    grid = CartesianGrid((-1, -1), (1, 1), (N, N))\n    ϕ = LevelSetMethods.sphere(grid; radius = R)\n    push!(S, Perimeter(ϕ))\nend\nlines(Ns, S; color = \"blue\")\nlines!([minimum(Ns); maximum(Ns)], [S0; S0]; color = \"red\")\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.Volume-Tuple{LevelSet}","page":"Reference","title":"LevelSetMethods.Volume","text":"Volume(ϕ::LevelSet)\n\nCompute the volume of the level-set function.\n\nusing LevelSetMethods\nR = 0.5\nV0 = π * R^2\nV = []\nNs = 8:8:256\nnb = length(Ns)\nfor N in Ns\n    grid = CartesianGrid((-1, -1), (1, 1), (N, N))\n    ϕ = LevelSetMethods.sphere(grid; radius = R)\n    push!(V, Volume(ϕ))\nend\nlines(Ns, V; color = \"blue\")\nlines!([minimum(Ns); maximum(Ns)], [V0; V0]; color = \"red\")\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.curvature-Tuple{LevelSet, Any}","page":"Reference","title":"LevelSetMethods.curvature","text":"curvature(ϕ::LevelSet, I)\n\nCompute the mean curvature of ϕ at I using κ = ∇ ⋅ (∇ϕ / |∇ϕ|). We use the formula κ = (Δϕ |∇ϕ|^2 - ∇ϕ^T Hϕ ∇ϕ) / |∇ϕ|^3 with first order finite differences. https://en.wikipedia.org/wiki/Meancurvature#Implicitformofmean_curvature\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.curvature-Tuple{LevelSet}","page":"Reference","title":"LevelSetMethods.curvature","text":"curvature(ϕ::LevelSet)\n\nCompute the mean curvature of ϕ at I using κ = ∇ ⋅ (∇ϕ / |∇ϕ|). See curvature(ϕ::LevelSet, I)@ for more details.\n\nusing LevelSetMethods\nN = 50\ngrid = CartesianGrid((-1, -1), (1, 1), (N, N))\nϕ = LevelSetMethods.star(grid)\nusing GLMakie\ncoeff = exp.(-40.0 * values(ϕ) .^ 2)\nκ = curvature(ϕ) .* coeff\nxs = LevelSetMethods.grid1d(grid, 1)\nys = LevelSetMethods.grid1d(grid, 2)\nfig, ax, hm = heatmap(xs, ys, κ)\nColorbar(fig[:, end+1], hm)\ncontour!(xs, ys, values(ϕ); levels = [0.0])\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.gradient-Tuple{LevelSet, Any}","page":"Reference","title":"LevelSetMethods.gradient","text":"gradient(ϕ::LevelSet, I)\n\nReturn the gradient vector ∇ϕ of ϕ at I\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.hessian-Tuple{LevelSet, Any}","page":"Reference","title":"LevelSetMethods.hessian","text":"hessian(ϕ::LevelSet, I)\n\nReturn the Hessian matrix Hϕ of ϕ at I\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.integrate!","page":"Reference","title":"LevelSetMethods.integrate!","text":"integrate!(ls::LevelSetEquation,tf,Δt=Inf)\n\nIntegrate the LevelSetEquation ls up to time tf, mutating the levelset and current_time of the object ls in the process.\n\nAn optional parameter Δt can be passed to specify a maximum time-step allowed for the integration. Note that the internal time-steps taken to evolve the level-set up to tf may be smaller than Δt due to stability reasons related to the terms and integrator employed.\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#LevelSetMethods.makie_theme","page":"Reference","title":"LevelSetMethods.makie_theme","text":"makie_theme()\n\nReturn a Makie theme for plots of level-set functions.\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#LevelSetMethods.normal-Tuple{LevelSet, Any}","page":"Reference","title":"LevelSetMethods.normal","text":"normal(ϕ::LevelSet, I)\n\nCompute the unit exterior normal vector of ϕ at I using n = ∇ϕ/|∇ϕ|\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.normal-Tuple{LevelSet}","page":"Reference","title":"LevelSetMethods.normal","text":"normal(ϕ::LevelSet)\n\nCompute the unit exterior normal vector of ϕ using n = ∇ϕ/|∇ϕ|\n\nusing LevelSetMethods\nN = 50\ngrid = CartesianGrid((-1, -1), (1, 1), (N, N))\nϕ = LevelSetMethods.star(grid)\nusing GLMakie\nn = normal(ϕ)\nxs = LevelSetMethods.grid1d(grid, 1)\nys = LevelSetMethods.grid1d(grid, 2)\ncoeff = exp.(-40.0 * values(ϕ) .^ 2)\nus = getindex.(n, 1) .* coeff\nvs = getindex.(n, 2) .* coeff\narrows(xs, ys, us, vs; arrowsize = 10 * vec(coeff), lengthscale = 2.0 / (N - 1))\ncontour!(xs, ys, values(ϕ); levels = [0.0])\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.set_makie_theme!","page":"Reference","title":"LevelSetMethods.set_makie_theme!","text":"set_makie_theme!()\n\nSet the Makie theme to LevelSetMethods.makie_theme().\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#LevelSetMethods.export_surface_mesh-Tuple{LevelSet, String}","page":"Reference","title":"LevelSetMethods.export_surface_mesh","text":"export_surface_mesh(ϕ::LevelSet, output::String;\n    hgrad = nothing, hmin = nothing, hmax = nothing, hausd = nothing)\n\nCompute a mesh of the LevelSet ϕ zero contour using MMGs_O3.\n\nhgrad control the growth ratio between two adjacent edges\n\nhmin and hmax control the edge sizes to be (respectively) greater than the hmin parameter and lower than the hmax one\n\nhausd control the maximal distance between the piecewise linear representation of the boundary and the reconstructed ideal boundary\n\nnote: Note\nOnly works for 3 dimensional level-set.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.export_surface_mesh-Tuple{LevelSetEquation, Vararg{Any}}","page":"Reference","title":"LevelSetMethods.export_surface_mesh","text":"export_surface_mesh(eq::LevelSetEquation, args...; kwargs...)\n\nCall export_surface_mesh on current_state(eq).\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.export_volume_mesh-Tuple{LevelSet, String}","page":"Reference","title":"LevelSetMethods.export_volume_mesh","text":"export_volume_mesh(ϕ::LevelSet, output::String;\n    hgrad = nothing, hmin = nothing, hmax = nothing, hausd = nothing)\n\nCompute a mesh of the domains associated with LevelSet eq using either MMG2dO3 or MMG3dO3.\n\nhgrad control the growth ratio between two adjacent edges.\n\nhmin and hmax control the edge sizes to be (respectively) greater than the hmin parameter and lower than the hmax one.\n\nhausd control the maximal distance between the piecewise linear representation of the boundary and the reconstructed ideal boundary.\n\nFor more information, see the official MMG documentation.\n\nnote: Note\nOnly works for 2 and 3 dimensional level-set.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#LevelSetMethods.export_volume_mesh-Tuple{LevelSetEquation, Vararg{Any}}","page":"Reference","title":"LevelSetMethods.export_volume_mesh","text":"export_volume_mesh(eq::LevelSetEquation, output; kwargs...)\n\nCall export_volume_mesh on current_state(eq).\n\n\n\n\n\n","category":"method"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"example-zalesak/#zalesak","page":"Zalesak disk","title":"Zalesak disk","text":"","category":"section"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The following examples demonstrate some applications of the package.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Zalesak disk\nShape optimization","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"CurrentModule = LevelSetMethods","category":"page"},{"location":"#LevelSetMethods","page":"LevelSetMethods","title":"LevelSetMethods","text":"","category":"section"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"Documentation for LevelSetMethods.","category":"page"},{"location":"#Installation","page":"LevelSetMethods","title":"Installation","text":"","category":"section"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"LevelSetMethods.jl is not yet registered in the Julia package registry. To install it, run the following command on a Julia REPL:","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"using Pkg; Pkg.add(\"https://github.com/maltezfaria/LevelSetMethods.jl\")","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"This will install the latest tagged version of the package and its dependencies.","category":"page"},{"location":"#Overview","page":"LevelSetMethods","title":"Overview","text":"","category":"section"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"This package defines a LevelSetEquation type that can be used to solve partial differential equations of the form","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"phi_t + underbraceboldsymbolu cdot nabla phi_substacktextadvection  textterm + underbracev phi_substacktextnormal  textterm + underbraceb kappa nabla phi_substacktextcurvature  textterm + underbracetextsign(phi)(nabla phi - 1)_substacktextreinitialization textterm = 0","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"where","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"phi  mathbbR^d to mathbbR is the level set function\nboldsymbolu mathbbR^d to mathbbR^d is a given (external) velocity field\nv  mathbbR^d to mathbbR is a normal speed\nb  mathbbR^d to mathbbR is a function that multiplies the curvature kappa = nabla cdot (nabla phi  nabla phi)","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"Here is how it looks in practice to create a simple LevelSetEquation:","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"using LevelSetMethods, StaticArrays\ngrid = CartesianGrid((-1, -1), (1, 1), (100, 100))\n# ϕ    = LevelSet(x -> sqrt(2*x[1]^2 + x[2]^2) - 1/2, grid)\nϕ    = LevelSetMethods.dumbbell(grid)\n𝐮    = MeshField(x -> SVector(-x[2], x[1]), grid)\neq   = LevelSetEquation(;\n  terms = (AdvectionTerm(𝐮),),\n  levelset = ϕ,\n  bc = PeriodicBC()\n)","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"You can easily plot the current state of your level set equation using the plot function from Makie:","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"using GLMakie # loads the MakieExt from LevelSetMethods\nLevelSetMethods.set_makie_theme!() # optional theme customization\nplot(eq)","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"To step it in time, we can use the integrate! function:","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"integrate!(eq, 1)","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"This will advance the solution up to t = 1, modifying ϕ in the process:","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"plot(eq)","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"Creating an animation can be achieved by calling integrate! in a loop and saving the results to a file:","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"using GLMakie\ntheme = LevelSetMethods.makie_theme()\nanim = with_theme(theme) do\n    obs = Observable(eq)\n    fig = Figure()\n    ax = Axis(fig[1, 1])\n    plot!(ax, obs)\n    framerate = 30\n    t0 = current_time(eq)\n    tf = t0 + π\n    timestamps = range(t0, tf; step = 1 / framerate)\n    record(fig, joinpath(@__DIR__, \"ls_intro.gif\"), timestamps) do t_\n        integrate!(eq, t_)\n        return obs[] = eq\n    end\nend","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"Here is what the .gif file looks like:","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"(Image: Dumbbell)","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"For more interesting applications and advanced usage, see the examples section!","category":"page"},{"location":"#Going-further","page":"LevelSetMethods","title":"Going further","text":"","category":"section"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"As illustrated above, the LevelSetEquation type is the main structure of this package. Becoming familiar with its fields and methods is a good starting point to use the package:","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"LevelSetEquation","category":"page"},{"location":"#LevelSetMethods.LevelSetEquation","page":"LevelSetMethods","title":"LevelSetMethods.LevelSetEquation","text":"LevelSetEquation(; terms, levelset, boundary_conditions, t = 0, integrator = RK3())\n\nCreate a of a level-set equation of the form ϕₜ + sum(terms) = 0, where each t ∈ terms is a LevelSetTerm and levelset is the initial LevelSet.\n\nCalling integrate!(ls, tf) will evolve the level-set equation up to time tf, modifying the current_state(eq) and current_time(eq) of the object eq in the process (and therefore the original levelset).\n\nBoundary conditions can be specified in two ways. If a single BoundaryCondition is provided, it will be applied uniformly to all boundaries of the domain. To apply different boundary conditions to each boundary, pass a tuple of the form (bc_x, bc_y, ...) with as many elements as dimensions in the domain. If bc_x is a BoundaryCondition, it will be applied to both boundaries in the x direction. If bc_x is a tuple of two BoundaryConditions, the first will be applied to the left boundary and the second to the right boundary. The same logic applies to the other dimensions.\n\nThe optional parameter t specifies the initial time of the simulation, and integrator is the TimeIntegrator used to evolve the level-set equation.\n\nusing LevelSetMethods, StaticArrays\ngrid = CartesianGrid((-1, -1), (1, 1), (50, 50))    # define the grid\nϕ = LevelSet(x -> x[1]^2 + x[2]^2 - 0.5^2, grid)    # initial shape\n𝐮 = MeshField(x -> SVector(1, 0), grid)             # advection velocity\nterms = (AdvectionTerm(𝐮),)            # advection and curvature terms\nbc = PeriodicBC()                                   # periodic boundary conditions\neq = LevelSetEquation(; terms, levelset = ϕ, bc)    # level-set equation\n\n# output\n\nLevel-set equation given by\n\n \t ϕₜ + 𝐮 ⋅ ∇ ϕ = 0\n\nCurrent time 0.0\n\n\n\n\n\n\n","category":"type"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"To learn more about the package, you should also check out the following sections:","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"The section on terms for a detailed description of each term and their corresponding customizations\nThe section on time integrators for a description of the available time integrators and how to use them\nThe section on boundary conditions for a description of the available boundary conditions and how to use them","category":"page"},{"location":"","page":"LevelSetMethods","title":"LevelSetMethods","text":"Finally, the examples section contains a list of examples that demonstrate some hopefully cool applications.","category":"page"},{"location":"extensions/#extensions","page":"Extensions","title":"Extensions","text":"","category":"section"},{"location":"extensions/","page":"Extensions","title":"Extensions","text":"The following extensions are present in the LevelSetMethods.jl package.","category":"page"},{"location":"extensions/","page":"Extensions","title":"Extensions","text":"Makie extension\nMmg extension","category":"page"}]
}
